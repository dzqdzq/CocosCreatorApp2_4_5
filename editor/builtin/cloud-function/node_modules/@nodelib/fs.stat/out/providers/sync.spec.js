"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const t=require("assert"),n=require("sinon"),r=require("../../../fs.macchiato"),e=require("../settings"),s=require("./sync");describe("Providers â†’ Sync",()=>{describe(".read",()=>{it("should return lstat for non-symlink entry",()=>{const i=n.stub().returns(new r.Stats),o=new e.default({fs:{lstatSync:i}}),l=s.read("filepath",o);t.strictEqual(l.ino,0)}),it('should return lstat for symlink entry when the "followSymbolicLink" option is disabled',()=>{const i=n.stub().returns(new r.Stats({isSymbolicLink:!0})),o=new e.default({followSymbolicLink:!1,fs:{lstatSync:i}}),l=s.read("filepath",o);t.strictEqual(l.ino,0)}),it("should return stat for symlink entry",()=>{const i=n.stub().returns(new r.Stats({isSymbolicLink:!0})),o=n.stub().returns(new r.Stats({ino:1})),l=new e.default({fs:{lstatSync:i,statSync:o}}),a=s.read("filepath",l);t.strictEqual(a.ino,1)}),it('should return marked stat for symlink entry when the "markSymbolicLink" option is enabled',()=>{const i=n.stub().returns(new r.Stats({isSymbolicLink:!0})),o=n.stub().returns(new r.Stats({ino:1})),l=new e.default({markSymbolicLink:!0,fs:{lstatSync:i,statSync:o}}),a=s.read("filepath",l);t.strictEqual(a.isSymbolicLink(),!0)}),it('should return lstat for broken symlink entry when the "throwErrorOnBrokenSymbolicLink" option is disabled',()=>{const i=n.stub().returns(new r.Stats({isSymbolicLink:!0})),o=n.stub().throws(new Error("error")),l=new e.default({fs:{lstatSync:i,statSync:o},throwErrorOnBrokenSymbolicLink:!1}),a=s.read("filepath",l);t.strictEqual(a.ino,0)}),it("should throw an error when symlink entry is broken",()=>{const i=n.stub().returns(new r.Stats({isSymbolicLink:!0})),o=n.stub().throws(new Error("broken")),l=new e.default({fs:{lstatSync:i,statSync:o}});t.throws(()=>s.read("filepath",l),/broken/)})})});