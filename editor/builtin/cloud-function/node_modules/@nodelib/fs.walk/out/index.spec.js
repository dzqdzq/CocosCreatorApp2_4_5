"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const t=require("assert"),e=require("fs"),r=require("rimraf"),i=require("."),s=t=>!t.dirent.isDirectory();function n(t){const e=[];return new Promise((r,i)=>{t.on("data",t=>e.push(t)),t.once("error",i),t.once("end",()=>r(e))})}describe("Package",()=>{before(()=>{r.sync("fixtures"),e.mkdirSync("fixtures"),e.writeFileSync("fixtures/file.txt",""),e.mkdirSync("fixtures/nested"),e.writeFileSync("fixtures/nested/file.txt","")}),after(()=>{r.sync("fixtures")}),describe(".walk",()=>{it("should throw an error for non-exist directory",e=>{i.walk("non-exist-directory",(r,i)=>{t.strictEqual(r.code,"ENOENT"),t.strictEqual(i,void 0),e()})}),it("should work without options or settings",e=>{i.walk("fixtures",(r,i)=>{t.strictEqual(r,null),t.strictEqual(i.length,3),e()})}),it("should work with options",e=>{i.walk("fixtures",{entryFilter:s},(r,i)=>{t.strictEqual(r,null),t.strictEqual(i.length,2),e()})}),it("should work with settings",e=>{const r=new i.Settings({entryFilter:s});i.walk("fixtures",r,(r,i)=>{t.strictEqual(r,null),t.strictEqual(i.length,2),e()})})}),describe(".walkStream",()=>{it("should throw an error for non-exist directory",async()=>{const e=i.walkStream("non-exist-directory");await t.rejects(()=>n(e),t=>"ENOENT"===t.code)}),it("should work without options or settings",async()=>{const e=i.walkStream("fixtures"),r=await n(e);t.strictEqual(r.length,3)}),it("should work with options",async()=>{const e=i.walkStream("fixtures",{entryFilter:s}),r=await n(e);t.strictEqual(r.length,2)}),it("should work with settings",async()=>{const e=new i.Settings({entryFilter:s}),r=i.walkStream("fixtures",e),o=await n(r);t.strictEqual(o.length,2)})}),describe(".walkSync",()=>{it("should throw an error for non-exist directory",()=>{t.throws(()=>i.walkSync("non-exist-directory"),t=>"ENOENT"===t.code)}),it("should work without options or settings",()=>{const e=i.walkSync("fixtures");t.strictEqual(e.length,3)}),it("should work with options",()=>{const e=i.walkSync("fixtures",{entryFilter:s});t.strictEqual(e.length,2)}),it("should work with settings",()=>{const e=new i.Settings({entryFilter:s}),r=i.walkSync("fixtures",e);t.strictEqual(r.length,2)})})});