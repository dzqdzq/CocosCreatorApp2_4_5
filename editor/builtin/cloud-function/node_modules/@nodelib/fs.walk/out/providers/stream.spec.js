"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const e=require("assert"),r=require("stream"),t=require("sinon"),s=require("../settings"),d=require("../tests"),a=require("./stream");class o extends a.default{constructor(e,r=new s.default){super(e,r),this._reader=new d.TestAsyncReader,this._stream.emit=t.stub(),this._stream.push=t.stub()}get reader(){return this._reader}get stream(){return this._stream}}describe("Providers â†’ Stream",()=>{describe(".read",()=>{it("should return stream",()=>{const t=new o("directory").read();e.ok(t instanceof r.Readable)}),it("should call reader function with correct set of arguments",()=>{const r=new o("directory");r.read(),e.ok(r.reader.read.called)}),it('should re-emit the "error" event from reader',()=>{const r=new o("directory");r.reader.onError.yields(d.EPERM_ERRNO),r.read(),e.deepStrictEqual(r.stream.emit.args,[["error",d.EPERM_ERRNO]])}),it('should call the "push" method with entry value for the "entry" event from reader',()=>{const r=new o("directory"),t=d.buildFakeFileEntry();r.reader.onEntry.yields(t),r.read(),e.deepStrictEqual(r.stream.push.args,[[t]])}),it('should call the "push" method with "null" value for the "end" event from reader',()=>{const r=new o("directory");r.reader.onEnd.yields(),r.read(),e.deepStrictEqual(r.stream.push.args,[[null]])}),it("should do not destroy reader when it is already destroyed",()=>{const r=new o("directory").read();r.destroy(),e.ok(r.destroyed),e.doesNotThrow(()=>r.destroy())})})});