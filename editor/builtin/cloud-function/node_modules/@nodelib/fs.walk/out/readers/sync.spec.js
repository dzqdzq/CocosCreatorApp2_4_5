"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const e=require("assert"),r=require("path"),t=require("sinon"),n=require("../settings"),s=require("../tests"),i=require("./sync");class a extends i.default{constructor(e,r=new n.default){super(e,r),this._scandir=t.stub()}get scandir(){return this._scandir}}describe("Readers â†’ Sync",()=>{describe(".read",()=>{it("should throw an error when the first call of scandir is broken",()=>{const r=new a("non-exist-directory");r.scandir.throws(s.EPERM_ERRNO),e.throws(()=>r.read(),{code:"EPERM"})}),it("should return empty array when the first call of scandir is broken but this error can be suppressed",()=>{const r=new n.default({errorFilter:e=>"EPERM"===e.code}),t=new a("non-exist-directory",r);t.scandir.throws(s.EPERM_ERRNO);const i=t.read();e.deepStrictEqual(i,[])}),it("should return entries",()=>{const r=new a("directory"),t=s.buildFakeDirectoryEntry(),n=s.buildFakeFileEntry();r.scandir.onFirstCall().returns([t]),r.scandir.onSecondCall().returns([n]);const i=[t,n],o=r.read();e.deepStrictEqual(o,i)}),it("should push to results only directories",()=>{const r=new n.default({entryFilter:e=>!e.dirent.isFile()}),t=new a("directory",r),i=s.buildFakeDirectoryEntry(),o=s.buildFakeFileEntry();t.scandir.onFirstCall().returns([i]),t.scandir.onSecondCall().returns([o]);const d=[i],c=t.read();e.deepStrictEqual(c,d)}),it("should do not read root directory",()=>{const r=new n.default({deepFilter:()=>!1}),t=new a("directory",r),i=s.buildFakeDirectoryEntry(),o=s.buildFakeFileEntry();t.scandir.onFirstCall().returns([i]),t.scandir.onSecondCall().returns([o]);const d=[i],c=t.read();e.deepStrictEqual(c,d)}),it("should set base path to entry when the `basePath` option is exist",()=>{const t=new n.default({basePath:"base"}),i=new a("directory",t),o=s.buildFakeDirectoryEntry(),d=s.buildFakeFileEntry();i.scandir.onFirstCall().returns([o]),i.scandir.onSecondCall().returns([d]);const c=i.read();e.strictEqual(c[0].path,r.join("base",o.name)),e.strictEqual(c[1].path,r.join("base","fake",d.name))}),it("should set base path to entry when the `basePath` option is exist and value is an empty string",()=>{const t=new n.default({basePath:""}),i=new a("directory",t),o=s.buildFakeDirectoryEntry(),d=s.buildFakeFileEntry();i.scandir.onFirstCall().returns([o]),i.scandir.onSecondCall().returns([d]);const c=i.read();e.strictEqual(c[0].path,o.name),e.strictEqual(c[1].path,r.join("fake",d.name))})})});