"use strict";var e=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.FunctionPacker=exports.CodeType=exports.API_MAX_SIZE=exports.BIG_FILE_SIZE=void 0;const t=e(require("fs")),i=e(require("del")),a=e(require("path")),s=e(require("make-dir")),r=e(require("util")),o=require("../utils"),c=require("../error");var h;exports.BIG_FILE_SIZE=10485760,exports.API_MAX_SIZE=52428800,function(e){e[e.File=0]="File",e[e.JavaFile=1]="JavaFile"}(h=exports.CodeType||(exports.CodeType={}));const l=".cloudbase_temp";exports.FunctionPacker=class{constructor(e){const{root:t,name:i,codeType:s,ignore:r,incrementalPath:o,functionPath:c}=e;this.name=i,this.ignore=r,this.codeType=s,this.incrementalPath=o,this.funcPath=c||a.default.resolve(t,i),this.tmpPath=t?a.default.join(t,`${l}_${i}`):a.default.join(process.cwd(),`${l}_${i}`)}async compressFiles(){o.checkFullAccess(this.funcPath,!0),this.clean(),await s.default(this.tmpPath),this.zipFilePath=a.default.resolve(this.tmpPath,`${this.name}.zip`);const e={dirPath:this.funcPath,outputPath:this.zipFilePath,ignore:this.ignore};this.incrementalPath&&(e.pattern=this.incrementalPath),await o.compressToZip(e)}getJavaFile(){const{funcPath:e}=this,t=e.replace(/\.jar$|\.zip$/g,""),i=o.checkFullAccess(`${t}.jar`),a=o.checkFullAccess(`${t}.zip`);if(!i&&!a)throw new c.CloudBaseError("未找到部署函数的 Jar 或者 ZIP 格式文件！");this.zipFilePath=i?`${t}.jar`:`${t}.zip`}async build(){if(this.codeType===h.JavaFile)try{await this.getJavaFile()}catch(e){throw this.clean(),new c.CloudBaseError(`函数代码打包失败：${e.message}`,{code:e.code})}if(this.codeType===h.File)try{await this.compressFiles()}catch(e){throw this.clean(),new c.CloudBaseError(`函数代码打包失败：${e.message}`,{code:e.code})}}async isBigFile(){this.zipFilePath||await this.build();const e=r.default.promisify(t.default.stat);return(await e(this.zipFilePath)).size>exports.BIG_FILE_SIZE}async isReachMaxSize(){this.zipFilePath||await this.build();const e=r.default.promisify(t.default.stat);return(await e(this.zipFilePath)).size>exports.API_MAX_SIZE}async getBase64Code(){const e=t.default.readFileSync(this.zipFilePath).toString("base64");return this.codeType!==h.JavaFile&&await this.clean(),e}async clean(){this.tmpPath&&i.default.sync([this.tmpPath],{force:!0})}};