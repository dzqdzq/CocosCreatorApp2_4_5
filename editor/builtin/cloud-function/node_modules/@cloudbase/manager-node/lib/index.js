"use strict";const e=require("./context"),n=require("./environmentManager");class t{constructor(t={}){this.cloudBaseConfig={};let{secretId:r,secretKey:i,token:o,envId:s,proxy:c,region:u}=t;if(r&&!i||!r&&i)throw new Error("secretId and secretKey must be a pair");this.cloudBaseConfig={secretId:r,secretKey:i,token:o,envId:s,proxy:c,region:u},this.context=new e.CloudBaseContext(this.cloudBaseConfig),this.environmentManager=new n.EnvironmentManager(this.context),this.environmentManager.add(s||"")}static init(e){return t.cloudBase||(t.cloudBase=new t(e)),t.cloudBase}addEnvironment(e){this.environmentManager.add(e)}currentEnvironment(){return this.environmentManager.getCurrentEnv()}get functions(){return this.currentEnvironment().getFunctionService()}get storage(){return this.currentEnvironment().getStorageService()}get database(){return this.currentEnvironment().getDatabaseService()}get hosting(){return this.currentEnvironment().getHostingService()}get access(){return this.currentEnvironment().getAccessService()}get cloudApp(){return this.currentEnvironment().getCloudBaseRunService()}commonService(e,n){return this.currentEnvironment().getCommonService(e,n)}get env(){return this.currentEnvironment().getEnvService()}get third(){return this.currentEnvironment().getThirdService()}get user(){return this.currentEnvironment().getUserService()}getEnvironmentManager(){return this.environmentManager}getManagerConfig(){return this.cloudBaseConfig}}module.exports=t;