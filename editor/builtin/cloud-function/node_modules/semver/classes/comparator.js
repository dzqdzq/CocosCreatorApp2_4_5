const r=Symbol("SemVer ANY");class e{static get ANY(){return r}constructor(o,s){if(s=t(s),o instanceof e){if(o.loose===!!s.loose)return o;o=o.value}a("comparator",o,s),this.options=s,this.loose=!!s.loose,this.parse(o),this.semver===r?this.value="":this.value=this.operator+this.semver.version,a("comp",this)}parse(e){const t=this.options.loose?o[s.COMPARATORLOOSE]:o[s.COMPARATOR],i=e.match(t);if(!i)throw new TypeError(`Invalid comparator: ${e}`);this.operator=void 0!==i[1]?i[1]:"","="===this.operator&&(this.operator=""),i[2]?this.semver=new n(i[2],this.options.loose):this.semver=r}toString(){return this.value}test(e){if(a("Comparator.test",e,this.options.loose),this.semver===r||e===r)return!0;if("string"==typeof e)try{e=new n(e,this.options)}catch(r){return!1}return i(e,this.operator,this.semver,this.options)}intersects(r,t){if(!(r instanceof e))throw new TypeError("a Comparator is required");if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),""===this.operator)return""===this.value||new p(r.value,t).test(this.value);if(""===r.operator)return""===r.value||new p(this.value,t).test(r.semver);const o=!(">="!==this.operator&&">"!==this.operator||">="!==r.operator&&">"!==r.operator),s=!("<="!==this.operator&&"<"!==this.operator||"<="!==r.operator&&"<"!==r.operator),a=this.semver.version===r.semver.version,n=!(">="!==this.operator&&"<="!==this.operator||">="!==r.operator&&"<="!==r.operator),h=i(this.semver,"<",r.semver,t)&&(">="===this.operator||">"===this.operator)&&("<="===r.operator||"<"===r.operator),u=i(this.semver,">",r.semver,t)&&("<="===this.operator||"<"===this.operator)&&(">="===r.operator||">"===r.operator);return o||s||a&&n||h||u}}module.exports=e;const t=require("../internal/parse-options"),{re:o,t:s}=require("../internal/re"),i=require("../functions/cmp"),a=require("../internal/debug"),n=require("./semver"),p=require("./range");