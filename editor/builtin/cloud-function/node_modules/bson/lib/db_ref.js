"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.DBRef=exports.isDBRefLike=void 0;const t=require("./parser/utils");exports.isDBRefLike=function(e){return t.isObjectLike(e)&&null!=e.$id&&null!=e.$ref};class e{constructor(t,e,i,s){const o=t.split(".");2===o.length&&(i=o.shift(),t=o.shift()),this.collection=t,this.oid=e,this.db=i,this.fields=s||{}}get namespace(){return this.collection}set namespace(t){this.collection=t}toJSON(){const t=Object.assign({$ref:this.collection,$id:this.oid},this.fields);return null!=this.db&&(t.$db=this.db),t}toExtendedJSON(t){t=t||{};let e={$ref:this.collection,$id:this.oid};return t.legacy?e:(this.db&&(e.$db=this.db),e=Object.assign(e,this.fields))}static fromExtendedJSON(t){const i=Object.assign({},t);return delete i.$ref,delete i.$id,delete i.$db,new e(t.$ref,t.$id,t.$db,i)}[Symbol.for("nodejs.util.inspect.custom")](){return this.inspect()}inspect(){const t=void 0===this.oid||void 0===this.oid.toString?this.oid:this.oid.toString();return`DBRef("${this.namespace}", "${t}"${this.db?`, "${this.db}"`:""})`}}exports.DBRef=e,Object.defineProperty(e.prototype,"_bsontype",{value:"DBRef"});