"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.serializeInto=void 0;const e=require("../binary"),t=require("../constants"),i=require("../ensure_buffer"),o=require("../extended_json"),n=require("../float_parser"),r=require("../long"),s=require("../map"),f=require("./utils"),l=/\x00/,u=new Set(["$db","$ref","$id","$clusterTime"]);function c(e){return"[object RegExp]"===Object.prototype.toString.call(e)}function p(e,i,o,n,r){e[n++]=t.BSON_DATA_STRING,e[(n=n+(r?e.write(i,n,void 0,"ascii"):e.write(i,n,void 0,"utf8"))+1)-1]=0;const s=e.write(o,n+4,void 0,"utf8");return e[n+3]=s+1>>24&255,e[n+2]=s+1>>16&255,e[n+1]=s+1>>8&255,e[n]=s+1&255,n=n+4+s,e[n++]=0,n}function y(e,i,o,r,s){if(Number.isInteger(o)&&o>=t.BSON_INT32_MIN&&o<=t.BSON_INT32_MAX){e[r++]=t.BSON_DATA_INT,r+=s?e.write(i,r,void 0,"ascii"):e.write(i,r,void 0,"utf8"),e[r++]=0,e[r++]=255&o,e[r++]=o>>8&255,e[r++]=o>>16&255,e[r++]=o>>24&255}else{e[r++]=t.BSON_DATA_NUMBER,r+=s?e.write(i,r,void 0,"ascii"):e.write(i,r,void 0,"utf8"),e[r++]=0,n.writeIEEE754(e,o,r,"little",52,8),r+=8}return r}function _(e,i,o,n,r){return e[n++]=t.BSON_DATA_NULL,n+=r?e.write(i,n,void 0,"ascii"):e.write(i,n,void 0,"utf8"),e[n++]=0,n}function a(e,i,o,n,r){return e[n++]=t.BSON_DATA_BOOLEAN,n+=r?e.write(i,n,void 0,"ascii"):e.write(i,n,void 0,"utf8"),e[n++]=0,e[n++]=o?1:0,n}function b(e,i,o,n,s){e[n++]=t.BSON_DATA_DATE,n+=s?e.write(i,n,void 0,"ascii"):e.write(i,n,void 0,"utf8"),e[n++]=0;const f=r.Long.fromNumber(o.getTime()),l=f.getLowBits(),u=f.getHighBits();return e[n++]=255&l,e[n++]=l>>8&255,e[n++]=l>>16&255,e[n++]=l>>24&255,e[n++]=255&u,e[n++]=u>>8&255,e[n++]=u>>16&255,e[n++]=u>>24&255,n}function d(e,i,o,n,r){if(e[n++]=t.BSON_DATA_REGEXP,n+=r?e.write(i,n,void 0,"ascii"):e.write(i,n,void 0,"utf8"),e[n++]=0,o.source&&null!=o.source.match(l))throw Error("value "+o.source+" must not contain null bytes");return n+=e.write(o.source,n,void 0,"utf8"),e[n++]=0,o.ignoreCase&&(e[n++]=105),o.global&&(e[n++]=115),o.multiline&&(e[n++]=109),e[n++]=0,n}function w(e,i,o,n,r){if(e[n++]=t.BSON_DATA_REGEXP,n+=r?e.write(i,n,void 0,"ascii"):e.write(i,n,void 0,"utf8"),e[n++]=0,null!=o.pattern.match(l))throw Error("pattern "+o.pattern+" must not contain null bytes");return n+=e.write(o.pattern,n,void 0,"utf8"),e[n++]=0,n+=e.write(o.options.split("").sort().join(""),n,void 0,"utf8"),e[n++]=0,n}function B(e,i,o,n,r){return null===o?e[n++]=t.BSON_DATA_NULL:"MinKey"===o._bsontype?e[n++]=t.BSON_DATA_MIN_KEY:e[n++]=t.BSON_DATA_MAX_KEY,n+=r?e.write(i,n,void 0,"ascii"):e.write(i,n,void 0,"utf8"),e[n++]=0,n}function A(e,i,o,n,r){if(e[n++]=t.BSON_DATA_OID,n+=r?e.write(i,n,void 0,"ascii"):e.write(i,n,void 0,"utf8"),e[n++]=0,"string"==typeof o.id)e.write(o.id,n,void 0,"binary");else{if(!o.id||!o.id.copy)throw new TypeError("object ["+JSON.stringify(o)+"] is not a valid ObjectId");o.id.copy(e,n,0,12)}return n+12}function v(e,o,n,r,s){e[r++]=t.BSON_DATA_BINARY,r+=s?e.write(o,r,void 0,"ascii"):e.write(o,r,void 0,"utf8"),e[r++]=0;const f=n.length;return e[r++]=255&f,e[r++]=f>>8&255,e[r++]=f>>16&255,e[r++]=f>>24&255,e[r++]=t.BSON_BINARY_SUBTYPE_DEFAULT,e.set(i.ensureBuffer(n),r),r+=f}function O(e,i,o,n,r=!1,s=0,f=!1,l=!0,u=!1,c=[]){for(let e=0;e<c.length;e++)if(c[e]===o)throw new Error("cyclic dependency detected");c.push(o),e[n++]=Array.isArray(o)?t.BSON_DATA_ARRAY:t.BSON_DATA_OBJECT,n+=u?e.write(i,n,void 0,"ascii"):e.write(i,n,void 0,"utf8"),e[n++]=0;const p=R(e,o,r,n,s+1,f,l,c);return c.pop(),p}function N(e,i,o,n,r){return e[n++]=t.BSON_DATA_DECIMAL128,n+=r?e.write(i,n,void 0,"ascii"):e.write(i,n,void 0,"utf8"),e[n++]=0,o.bytes.copy(e,n,0,16),n+16}function S(e,i,o,n,r){e[n++]="Long"===o._bsontype?t.BSON_DATA_LONG:t.BSON_DATA_TIMESTAMP,n+=r?e.write(i,n,void 0,"ascii"):e.write(i,n,void 0,"utf8"),e[n++]=0;const s=o.getLowBits(),f=o.getHighBits();return e[n++]=255&s,e[n++]=s>>8&255,e[n++]=s>>16&255,e[n++]=s>>24&255,e[n++]=255&f,e[n++]=f>>8&255,e[n++]=f>>16&255,e[n++]=f>>24&255,n}function T(e,i,o,n,r){return o=o.valueOf(),e[n++]=t.BSON_DATA_INT,n+=r?e.write(i,n,void 0,"ascii"):e.write(i,n,void 0,"utf8"),e[n++]=0,e[n++]=255&o,e[n++]=o>>8&255,e[n++]=o>>16&255,e[n++]=o>>24&255,n}function E(e,i,o,r,s){return e[r++]=t.BSON_DATA_NUMBER,r+=s?e.write(i,r,void 0,"ascii"):e.write(i,r,void 0,"utf8"),e[r++]=0,n.writeIEEE754(e,o.value,r,"little",52,8),r+=8}function D(e,i,o,n,r=!1,s=0,l){e[n++]=t.BSON_DATA_CODE,n+=l?e.write(i,n,void 0,"ascii"):e.write(i,n,void 0,"utf8"),e[n++]=0;const u=f.normalizedFunctionString(o),c=e.write(u,n+4,void 0,"utf8")+1;return e[n]=255&c,e[n+1]=c>>8&255,e[n+2]=c>>16&255,e[n+3]=c>>24&255,n=n+4+c-1,e[n++]=0,n}function g(e,i,o,n,r=!1,s=0,f=!1,l=!0,u=!1){if(o.scope&&"object"==typeof o.scope){e[n++]=t.BSON_DATA_CODE_W_SCOPE,n+=u?e.write(i,n,void 0,"ascii"):e.write(i,n,void 0,"utf8"),e[n++]=0;let c=n;const p="string"==typeof o.code?o.code:o.code.toString();n+=4;const y=e.write(p,n+4,void 0,"utf8")+1;e[n]=255&y,e[n+1]=y>>8&255,e[n+2]=y>>16&255,e[n+3]=y>>24&255,e[n+4+y-1]=0,n=n+y+4;const _=R(e,o.scope,r,n,s+1,f,l);n=_-1;const a=_-c;e[c++]=255&a,e[c++]=a>>8&255,e[c++]=a>>16&255,e[c++]=a>>24&255,e[n++]=0}else{e[n++]=t.BSON_DATA_CODE,n+=u?e.write(i,n,void 0,"ascii"):e.write(i,n,void 0,"utf8"),e[n++]=0;const r=o.code.toString(),s=e.write(r,n+4,void 0,"utf8")+1;e[n]=255&s,e[n+1]=s>>8&255,e[n+2]=s>>16&255,e[n+3]=s>>24&255,n=n+4+s-1,e[n++]=0}return n}function m(i,o,n,r,s){i[r++]=t.BSON_DATA_BINARY,r+=s?i.write(o,r,void 0,"ascii"):i.write(o,r,void 0,"utf8"),i[r++]=0;const f=n.value(!0);let l=n.position;return n.sub_type===e.Binary.SUBTYPE_BYTE_ARRAY&&(l+=4),i[r++]=255&l,i[r++]=l>>8&255,i[r++]=l>>16&255,i[r++]=l>>24&255,i[r++]=n.sub_type,n.sub_type===e.Binary.SUBTYPE_BYTE_ARRAY&&(l-=4,i[r++]=255&l,i[r++]=l>>8&255,i[r++]=l>>16&255,i[r++]=l>>24&255),i.set(f,r),r+=n.position}function h(e,i,o,n,r){e[n++]=t.BSON_DATA_SYMBOL,n+=r?e.write(i,n,void 0,"ascii"):e.write(i,n,void 0,"utf8"),e[n++]=0;const s=e.write(o.value,n+4,void 0,"utf8")+1;return e[n]=255&s,e[n+1]=s>>8&255,e[n+2]=s>>16&255,e[n+3]=s>>24&255,n=n+4+s-1,e[n++]=0,n}function I(e,i,o,n,r,s,f){e[n++]=t.BSON_DATA_OBJECT,n+=f?e.write(i,n,void 0,"ascii"):e.write(i,n,void 0,"utf8"),e[n++]=0;let l=n,u={$ref:o.collection||o.namespace,$id:o.oid};null!=o.db&&(u.$db=o.db);const c=R(e,u=Object.assign(u,o.fields),!1,n,r+1,s),p=c-l;return e[l++]=255&p,e[l++]=p>>8&255,e[l++]=p>>16&255,e[l++]=p>>24&255,c}function R(e,t,i=!1,n=0,r=0,R=!1,j=!0,M=[]){n=n||0,(M=M||[]).push(t);let x=n+4;if(Array.isArray(t))for(let n=0;n<t.length;n++){const s=""+n;let l=t[n];if(l&&l.toBSON){if("function"!=typeof l.toBSON)throw new TypeError("toBSON is not a function");l=l.toBSON()}if("string"==typeof l)x=p(e,s,l,x,!0);else if("number"==typeof l)x=y(e,s,l,x,!0);else{if("bigint"==typeof l)throw new TypeError("Unsupported type BigInt, please use Decimal128");if("boolean"==typeof l)x=a(e,s,l,x,!0);else if(l instanceof Date||f.isDate(l))x=b(e,s,l,x,!0);else if(void 0===l)x=_(e,s,0,x,!0);else if(null===l)x=_(e,s,0,x,!0);else if("ObjectId"===l._bsontype||"ObjectID"===l._bsontype)x=A(e,s,l,x,!0);else if(f.isBuffer(l)||f.isUint8Array(l))x=v(e,s,l,x,!0);else if(l instanceof RegExp||c(l))x=d(e,s,l,x,!0);else if("object"==typeof l&&null==l._bsontype)x=O(e,s,l,x,i,r,R,j,!0,M);else if("object"==typeof l&&o.isBSONType(l)&&"Decimal128"===l._bsontype)x=N(e,s,l,x,!0);else if("Long"===l._bsontype||"Timestamp"===l._bsontype)x=S(e,s,l,x,!0);else if("Double"===l._bsontype)x=E(e,s,l,x,!0);else if("function"==typeof l&&R)x=D(e,s,l,x,i,r,!0);else if("Code"===l._bsontype)x=g(e,s,l,x,i,r,R,j,!0);else if("Binary"===l._bsontype)x=m(e,s,l,x,!0);else if("Symbol"===l._bsontype)x=h(e,s,l,x,!0);else if("DBRef"===l._bsontype)x=I(e,s,l,x,r,R,!0);else if("BSONRegExp"===l._bsontype)x=w(e,s,l,x,!0);else if("Int32"===l._bsontype)x=T(e,s,l,x,!0);else if("MinKey"===l._bsontype||"MaxKey"===l._bsontype)x=B(e,s,l,x,!0);else if(void 0!==l._bsontype)throw new TypeError("Unrecognized or invalid _bsontype: "+l._bsontype)}}else if(t instanceof s.Map){const o=t.entries();let n=!1;for(;!n;){const t=o.next();if(n=!!t.done)continue;const s=t.value[0],U=t.value[1],L=typeof U;if("string"==typeof s&&!u.has(s)){if(null!=s.match(l))throw Error("key "+s+" must not contain null bytes");if(i){if("$"===s[0])throw Error("key "+s+" must not start with '$'");if(~s.indexOf("."))throw Error("key "+s+" must not contain '.'")}}if("string"===L)x=p(e,s,U,x);else if("number"===L)x=y(e,s,U,x);else{if("bigint"===L||f.isBigInt64Array(U)||f.isBigUInt64Array(U))throw new TypeError("Unsupported type BigInt, please use Decimal128");if("boolean"===L)x=a(e,s,U,x);else if(U instanceof Date||f.isDate(U))x=b(e,s,U,x);else if(null===U||void 0===U&&!1===j)x=_(e,s,0,x);else if("ObjectId"===U._bsontype||"ObjectID"===U._bsontype)x=A(e,s,U,x);else if(f.isBuffer(U)||f.isUint8Array(U))x=v(e,s,U,x);else if(U instanceof RegExp||c(U))x=d(e,s,U,x);else if("object"===L&&null==U._bsontype)x=O(e,s,U,x,i,r,R,j,!1,M);else if("object"===L&&"Decimal128"===U._bsontype)x=N(e,s,U,x);else if("Long"===U._bsontype||"Timestamp"===U._bsontype)x=S(e,s,U,x);else if("Double"===U._bsontype)x=E(e,s,U,x);else if("Code"===U._bsontype)x=g(e,s,U,x,i,r,R,j);else if("function"==typeof U&&R)x=D(e,s,U,x,i,r,R);else if("Binary"===U._bsontype)x=m(e,s,U,x);else if("Symbol"===U._bsontype)x=h(e,s,U,x);else if("DBRef"===U._bsontype)x=I(e,s,U,x,r,R);else if("BSONRegExp"===U._bsontype)x=w(e,s,U,x);else if("Int32"===U._bsontype)x=T(e,s,U,x);else if("MinKey"===U._bsontype||"MaxKey"===U._bsontype)x=B(e,s,U,x);else if(void 0!==U._bsontype)throw new TypeError("Unrecognized or invalid _bsontype: "+U._bsontype)}}}else{if(t.toBSON){if("function"!=typeof t.toBSON)throw new TypeError("toBSON is not a function");if(null!=(t=t.toBSON())&&"object"!=typeof t)throw new TypeError("toBSON function did not return an object")}for(const o in t){let n=t[o];if(n&&n.toBSON){if("function"!=typeof n.toBSON)throw new TypeError("toBSON is not a function");n=n.toBSON()}const s=typeof n;if("string"==typeof o&&!u.has(o)){if(null!=o.match(l))throw Error("key "+o+" must not contain null bytes");if(i){if("$"===o[0])throw Error("key "+o+" must not start with '$'");if(~o.indexOf("."))throw Error("key "+o+" must not contain '.'")}}if("string"===s)x=p(e,o,n,x);else if("number"===s)x=y(e,o,n,x);else{if("bigint"===s)throw new TypeError("Unsupported type BigInt, please use Decimal128");if("boolean"===s)x=a(e,o,n,x);else if(n instanceof Date||f.isDate(n))x=b(e,o,n,x);else if(void 0===n)!1===j&&(x=_(e,o,0,x));else if(null===n)x=_(e,o,0,x);else if("ObjectId"===n._bsontype||"ObjectID"===n._bsontype)x=A(e,o,n,x);else if(f.isBuffer(n)||f.isUint8Array(n))x=v(e,o,n,x);else if(n instanceof RegExp||c(n))x=d(e,o,n,x);else if("object"===s&&null==n._bsontype)x=O(e,o,n,x,i,r,R,j,!1,M);else if("object"===s&&"Decimal128"===n._bsontype)x=N(e,o,n,x);else if("Long"===n._bsontype||"Timestamp"===n._bsontype)x=S(e,o,n,x);else if("Double"===n._bsontype)x=E(e,o,n,x);else if("Code"===n._bsontype)x=g(e,o,n,x,i,r,R,j);else if("function"==typeof n&&R)x=D(e,o,n,x,i,r,R);else if("Binary"===n._bsontype)x=m(e,o,n,x);else if("Symbol"===n._bsontype)x=h(e,o,n,x);else if("DBRef"===n._bsontype)x=I(e,o,n,x,r,R);else if("BSONRegExp"===n._bsontype)x=w(e,o,n,x);else if("Int32"===n._bsontype)x=T(e,o,n,x);else if("MinKey"===n._bsontype||"MaxKey"===n._bsontype)x=B(e,o,n,x);else if(void 0!==n._bsontype)throw new TypeError("Unrecognized or invalid _bsontype: "+n._bsontype)}}}M.pop(),e[x++]=0;const U=x-n;return e[n++]=255&U,e[n++]=U>>8&255,e[n++]=U>>16&255,e[n++]=U>>24&255,x}exports.serializeInto=R;